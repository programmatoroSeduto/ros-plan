// Generated by gencpp from file rosplan_dispatch_msgs/ActionFeedback.msg
// DO NOT EDIT!


#ifndef ROSPLAN_DISPATCH_MSGS_MESSAGE_ACTIONFEEDBACK_H
#define ROSPLAN_DISPATCH_MSGS_MESSAGE_ACTIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <diagnostic_msgs/KeyValue.h>

namespace rosplan_dispatch_msgs
{
template <class ContainerAllocator>
struct ActionFeedback_
{
  typedef ActionFeedback_<ContainerAllocator> Type;

  ActionFeedback_()
    : action_id(0)
    , plan_id(0)
    , status(0)
    , information()  {
    }
  ActionFeedback_(const ContainerAllocator& _alloc)
    : action_id(0)
    , plan_id(0)
    , status(0)
    , information(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _action_id_type;
  _action_id_type action_id;

   typedef int32_t _plan_id_type;
  _plan_id_type plan_id;

   typedef int32_t _status_type;
  _status_type status;

   typedef std::vector< ::diagnostic_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::other >  _information_type;
  _information_type information;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_PRECONDITION_FALSE)
  #undef ACTION_PRECONDITION_FALSE
#endif
#if defined(_WIN32) && defined(ACTION_ENABLED)
  #undef ACTION_ENABLED
#endif
#if defined(_WIN32) && defined(ACTION_DISPATCHED_TO_GOAL_STATE)
  #undef ACTION_DISPATCHED_TO_GOAL_STATE
#endif
#if defined(_WIN32) && defined(ACTION_SUCCEEDED_TO_GOAL_STATE)
  #undef ACTION_SUCCEEDED_TO_GOAL_STATE
#endif
#if defined(_WIN32) && defined(ACTION_DISPATCHED_TO_START_STATE)
  #undef ACTION_DISPATCHED_TO_START_STATE
#endif
#if defined(_WIN32) && defined(ACTION_SUCCEEDED_TO_START_STATE)
  #undef ACTION_SUCCEEDED_TO_START_STATE
#endif
#if defined(_WIN32) && defined(ACTION_FAILED)
  #undef ACTION_FAILED
#endif

  enum {
    ACTION_PRECONDITION_FALSE = 0,
    ACTION_ENABLED = 1,
    ACTION_DISPATCHED_TO_GOAL_STATE = 1,
    ACTION_SUCCEEDED_TO_GOAL_STATE = 2,
    ACTION_DISPATCHED_TO_START_STATE = 3,
    ACTION_SUCCEEDED_TO_START_STATE = 4,
    ACTION_FAILED = 10,
  };


  typedef boost::shared_ptr< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ActionFeedback_

typedef ::rosplan_dispatch_msgs::ActionFeedback_<std::allocator<void> > ActionFeedback;

typedef boost::shared_ptr< ::rosplan_dispatch_msgs::ActionFeedback > ActionFeedbackPtr;
typedef boost::shared_ptr< ::rosplan_dispatch_msgs::ActionFeedback const> ActionFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator1> & lhs, const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.action_id == rhs.action_id &&
    lhs.plan_id == rhs.plan_id &&
    lhs.status == rhs.status &&
    lhs.information == rhs.information;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator1> & lhs, const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosplan_dispatch_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6efa68a42d1d10ddf52cc6b649317f64";
  }

  static const char* value(const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6efa68a42d1d10ddULL;
  static const uint64_t static_value2 = 0xf52cc6b649317f64ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_dispatch_msgs/ActionFeedback";
  }

  static const char* value(const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#actionFeedback message\n"
"int32 ACTION_PRECONDITION_FALSE = 0\n"
"int32 ACTION_ENABLED = 1\n"
"int32 ACTION_DISPATCHED_TO_GOAL_STATE = 1\n"
"int32 ACTION_SUCCEEDED_TO_GOAL_STATE = 2\n"
"int32 ACTION_DISPATCHED_TO_START_STATE = 3\n"
"int32 ACTION_SUCCEEDED_TO_START_STATE = 4\n"
"int32 ACTION_FAILED = 10\n"
"\n"
"int32 action_id\n"
"int32 plan_id\n"
"int32 status\n"
"diagnostic_msgs/KeyValue[] information\n"
"\n"
"================================================================================\n"
"MSG: diagnostic_msgs/KeyValue\n"
"string key # what to label this value when viewing\n"
"string value # a value to track over time\n"
;
  }

  static const char* value(const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_id);
      stream.next(m.plan_id);
      stream.next(m.status);
      stream.next(m.information);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_dispatch_msgs::ActionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "action_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_id);
    s << indent << "plan_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.plan_id);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "information[]" << std::endl;
    for (size_t i = 0; i < v.information.size(); ++i)
    {
      s << indent << "  information[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::diagnostic_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.information[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_DISPATCH_MSGS_MESSAGE_ACTIONFEEDBACK_H
