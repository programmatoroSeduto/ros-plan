// Generated by gencpp from file armor_msgs/ArmorDirectiveListResponse.msg
// DO NOT EDIT!


#ifndef ARMOR_MSGS_MESSAGE_ARMORDIRECTIVELISTRESPONSE_H
#define ARMOR_MSGS_MESSAGE_ARMORDIRECTIVELISTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <armor_msgs/ArmorDirectiveRes.h>

namespace armor_msgs
{
template <class ContainerAllocator>
struct ArmorDirectiveListResponse_
{
  typedef ArmorDirectiveListResponse_<ContainerAllocator> Type;

  ArmorDirectiveListResponse_()
    : success(false)
    , is_consistent(false)
    , armor_responses()  {
    }
  ArmorDirectiveListResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , is_consistent(false)
    , armor_responses(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef uint8_t _is_consistent_type;
  _is_consistent_type is_consistent;

   typedef std::vector< ::armor_msgs::ArmorDirectiveRes_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::armor_msgs::ArmorDirectiveRes_<ContainerAllocator> >::other >  _armor_responses_type;
  _armor_responses_type armor_responses;





  typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ArmorDirectiveListResponse_

typedef ::armor_msgs::ArmorDirectiveListResponse_<std::allocator<void> > ArmorDirectiveListResponse;

typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveListResponse > ArmorDirectiveListResponsePtr;
typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveListResponse const> ArmorDirectiveListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator1> & lhs, const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.is_consistent == rhs.is_consistent &&
    lhs.armor_responses == rhs.armor_responses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator1> & lhs, const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace armor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1c0fa5cf51108b15b8fe923993bd9ed5";
  }

  static const char* value(const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1c0fa5cf51108b15ULL;
  static const uint64_t static_value2 = 0xb8fe923993bd9ed5ULL;
};

template<class ContainerAllocator>
struct DataType< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "armor_msgs/ArmorDirectiveListResponse";
  }

  static const char* value(const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"bool is_consistent\n"
"ArmorDirectiveRes[] armor_responses\n"
"\n"
"================================================================================\n"
"MSG: armor_msgs/ArmorDirectiveRes\n"
"bool success\n"
"bool timeout\n"
"int32 exit_code\n"
"string error_description\n"
"bool is_consistent\n"
"string[] queried_objects\n"
"QueryItem[] sparql_queried_objects\n"
"================================================================================\n"
"MSG: armor_msgs/QueryItem\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.is_consistent);
      stream.next(m.armor_responses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmorDirectiveListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::armor_msgs::ArmorDirectiveListResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "is_consistent: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_consistent);
    s << indent << "armor_responses[]" << std::endl;
    for (size_t i = 0; i < v.armor_responses.size(); ++i)
    {
      s << indent << "  armor_responses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::armor_msgs::ArmorDirectiveRes_<ContainerAllocator> >::stream(s, indent + "    ", v.armor_responses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARMOR_MSGS_MESSAGE_ARMORDIRECTIVELISTRESPONSE_H
