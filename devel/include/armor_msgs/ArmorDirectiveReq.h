// Generated by gencpp from file armor_msgs/ArmorDirectiveReq.msg
// DO NOT EDIT!


#ifndef ARMOR_MSGS_MESSAGE_ARMORDIRECTIVEREQ_H
#define ARMOR_MSGS_MESSAGE_ARMORDIRECTIVEREQ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace armor_msgs
{
template <class ContainerAllocator>
struct ArmorDirectiveReq_
{
  typedef ArmorDirectiveReq_<ContainerAllocator> Type;

  ArmorDirectiveReq_()
    : client_name()
    , reference_name()
    , command()
    , primary_command_spec()
    , secondary_command_spec()
    , args()  {
    }
  ArmorDirectiveReq_(const ContainerAllocator& _alloc)
    : client_name(_alloc)
    , reference_name(_alloc)
    , command(_alloc)
    , primary_command_spec(_alloc)
    , secondary_command_spec(_alloc)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _client_name_type;
  _client_name_type client_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reference_name_type;
  _reference_name_type reference_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _primary_command_spec_type;
  _primary_command_spec_type primary_command_spec;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _secondary_command_spec_type;
  _secondary_command_spec_type secondary_command_spec;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _args_type;
  _args_type args;





  typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> const> ConstPtr;

}; // struct ArmorDirectiveReq_

typedef ::armor_msgs::ArmorDirectiveReq_<std::allocator<void> > ArmorDirectiveReq;

typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveReq > ArmorDirectiveReqPtr;
typedef boost::shared_ptr< ::armor_msgs::ArmorDirectiveReq const> ArmorDirectiveReqConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator1> & lhs, const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator2> & rhs)
{
  return lhs.client_name == rhs.client_name &&
    lhs.reference_name == rhs.reference_name &&
    lhs.command == rhs.command &&
    lhs.primary_command_spec == rhs.primary_command_spec &&
    lhs.secondary_command_spec == rhs.secondary_command_spec &&
    lhs.args == rhs.args;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator1> & lhs, const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace armor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "385184fa98c36b7f00729ae2078dfc92";
  }

  static const char* value(const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x385184fa98c36b7fULL;
  static const uint64_t static_value2 = 0x00729ae2078dfc92ULL;
};

template<class ContainerAllocator>
struct DataType< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "armor_msgs/ArmorDirectiveReq";
  }

  static const char* value(const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string client_name\n"
"string reference_name\n"
"string command\n"
"string primary_command_spec\n"
"string secondary_command_spec\n"
"string[] args\n"
;
  }

  static const char* value(const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.client_name);
      stream.next(m.reference_name);
      stream.next(m.command);
      stream.next(m.primary_command_spec);
      stream.next(m.secondary_command_spec);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmorDirectiveReq_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::armor_msgs::ArmorDirectiveReq_<ContainerAllocator>& v)
  {
    s << indent << "client_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.client_name);
    s << indent << "reference_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.reference_name);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "primary_command_spec: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.primary_command_spec);
    s << indent << "secondary_command_spec: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.secondary_command_spec);
    s << indent << "args[]" << std::endl;
    for (size_t i = 0; i < v.args.size(); ++i)
    {
      s << indent << "  args[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARMOR_MSGS_MESSAGE_ARMORDIRECTIVEREQ_H
