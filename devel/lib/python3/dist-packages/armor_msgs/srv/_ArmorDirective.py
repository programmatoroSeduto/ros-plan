# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from armor_msgs/ArmorDirectiveRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import armor_msgs.msg

class ArmorDirectiveRequest(genpy.Message):
  _md5sum = "0dd786c47e3f813a5233dff98bbcad0d"
  _type = "armor_msgs/ArmorDirectiveRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ArmorDirectiveReq armor_request

================================================================================
MSG: armor_msgs/ArmorDirectiveReq
string client_name
string reference_name
string command
string primary_command_spec
string secondary_command_spec
string[] args"""
  __slots__ = ['armor_request']
  _slot_types = ['armor_msgs/ArmorDirectiveReq']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       armor_request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmorDirectiveRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.armor_request is None:
        self.armor_request = armor_msgs.msg.ArmorDirectiveReq()
    else:
      self.armor_request = armor_msgs.msg.ArmorDirectiveReq()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.armor_request.client_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.reference_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.primary_command_spec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.secondary_command_spec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.armor_request.args)
      buff.write(_struct_I.pack(length))
      for val1 in self.armor_request.args:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.armor_request is None:
        self.armor_request = armor_msgs.msg.ArmorDirectiveReq()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.client_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.client_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.reference_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.reference_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.primary_command_spec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.primary_command_spec = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.secondary_command_spec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.secondary_command_spec = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.armor_request.args = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.armor_request.args.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.armor_request.client_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.reference_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.primary_command_spec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_request.secondary_command_spec
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.armor_request.args)
      buff.write(_struct_I.pack(length))
      for val1 in self.armor_request.args:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.armor_request is None:
        self.armor_request = armor_msgs.msg.ArmorDirectiveReq()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.client_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.client_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.reference_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.reference_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.command = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.primary_command_spec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.primary_command_spec = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_request.secondary_command_spec = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_request.secondary_command_spec = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.armor_request.args = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.armor_request.args.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from armor_msgs/ArmorDirectiveResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import armor_msgs.msg

class ArmorDirectiveResponse(genpy.Message):
  _md5sum = "87426bc7efd8a82957435c59be4712e0"
  _type = "armor_msgs/ArmorDirectiveResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ArmorDirectiveRes armor_response


================================================================================
MSG: armor_msgs/ArmorDirectiveRes
bool success
bool timeout
int32 exit_code
string error_description
bool is_consistent
string[] queried_objects
QueryItem[] sparql_queried_objects
================================================================================
MSG: armor_msgs/QueryItem
string key
string value"""
  __slots__ = ['armor_response']
  _slot_types = ['armor_msgs/ArmorDirectiveRes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       armor_response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArmorDirectiveResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.armor_response is None:
        self.armor_response = armor_msgs.msg.ArmorDirectiveRes()
    else:
      self.armor_response = armor_msgs.msg.ArmorDirectiveRes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bi().pack(_x.armor_response.success, _x.armor_response.timeout, _x.armor_response.exit_code))
      _x = self.armor_response.error_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_response.is_consistent
      buff.write(_get_struct_B().pack(_x))
      length = len(self.armor_response.queried_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.armor_response.queried_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.armor_response.sparql_queried_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.armor_response.sparql_queried_objects:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.armor_response is None:
        self.armor_response = armor_msgs.msg.ArmorDirectiveRes()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.armor_response.success, _x.armor_response.timeout, _x.armor_response.exit_code,) = _get_struct_2Bi().unpack(str[start:end])
      self.armor_response.success = bool(self.armor_response.success)
      self.armor_response.timeout = bool(self.armor_response.timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_response.error_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_response.error_description = str[start:end]
      start = end
      end += 1
      (self.armor_response.is_consistent,) = _get_struct_B().unpack(str[start:end])
      self.armor_response.is_consistent = bool(self.armor_response.is_consistent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.armor_response.queried_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.armor_response.queried_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.armor_response.sparql_queried_objects = []
      for i in range(0, length):
        val1 = armor_msgs.msg.QueryItem()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.armor_response.sparql_queried_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bi().pack(_x.armor_response.success, _x.armor_response.timeout, _x.armor_response.exit_code))
      _x = self.armor_response.error_description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.armor_response.is_consistent
      buff.write(_get_struct_B().pack(_x))
      length = len(self.armor_response.queried_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.armor_response.queried_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.armor_response.sparql_queried_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.armor_response.sparql_queried_objects:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.armor_response is None:
        self.armor_response = armor_msgs.msg.ArmorDirectiveRes()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.armor_response.success, _x.armor_response.timeout, _x.armor_response.exit_code,) = _get_struct_2Bi().unpack(str[start:end])
      self.armor_response.success = bool(self.armor_response.success)
      self.armor_response.timeout = bool(self.armor_response.timeout)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.armor_response.error_description = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.armor_response.error_description = str[start:end]
      start = end
      end += 1
      (self.armor_response.is_consistent,) = _get_struct_B().unpack(str[start:end])
      self.armor_response.is_consistent = bool(self.armor_response.is_consistent)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.armor_response.queried_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.armor_response.queried_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.armor_response.sparql_queried_objects = []
      for i in range(0, length):
        val1 = armor_msgs.msg.QueryItem()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.armor_response.sparql_queried_objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bi = None
def _get_struct_2Bi():
    global _struct_2Bi
    if _struct_2Bi is None:
        _struct_2Bi = struct.Struct("<2Bi")
    return _struct_2Bi
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class ArmorDirective(object):
  _type          = 'armor_msgs/ArmorDirective'
  _md5sum = '39cbf11e18dc47e2c7b5fda84e5d8c39'
  _request_class  = ArmorDirectiveRequest
  _response_class = ArmorDirectiveResponse
